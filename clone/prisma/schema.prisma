// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

//can chnage the models below to make catch.
  accounts Account[]
  listings Listing[]
  reservations Reservation[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userID String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_Token String? @db.String
  accessToken String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String? 

  //this line keeps a relation with the user using the user ID field. 
  user User @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    description String
    imageSrc String
    createdAT DateTime @default(now())
    category String
    roomCount Int
    bathroomCount Int
    guestCount Int
    locationValue String
    userID String @db.ObjectId
    price Int

    //creating a relation with the user: 
    user User @relation(fields: [userID], references: [id], onDelete: Cascade)
    reservation Reservation[]
}

model Reservation{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userID String @db.ObjectId
    listingID String @db.ObjectId
    startDate DateTime
    endDate DateTime
    totalPrice Int
    createdAt DateTime @default(now())

    user User @relation(fields: [userID], references: [id], onDelete: Cascade)
    listing Listing @relation(fields: [listingID], references: [id], onDelete: Cascade)
}